
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author MyPC
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    MainBoard mainboard;
    final int UNIT = 36;
    final int MARGIN_X = 30;
    final int MARGIN_Y = 50;

    boolean boardCheck[][];
     

    public MainFrame() {
        initComponents();
        this.setBackground(Color.black);
        mainboard = new MainBoard();
        mainboard.generateMainBoard();

        this.txt_GameInfo.setText(mainboard.width +" " +mainboard.height +"\n" + mainboard.numofBlock + "" + "");
        for (int i = 1; i <= mainboard.numofBlock; i++) {
            this.txt_GameInfo.setText(this.txt_GameInfo.getText() + "\n" + mainboard.listOfBlock[i].width + "  " + mainboard.listOfBlock[i].height);
        }

        isLoadSolution = false;
        txt_solution.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txt_GameInfo = new javax.swing.JTextArea();
        btn_generateNewBoard = new javax.swing.JButton();
        btn_exportInput = new javax.swing.JButton();
        btn_loadSolution = new javax.swing.JButton();
        btn_solve = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_solution = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btn_loadTest = new javax.swing.JButton();
        txt_result = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txt_GameInfo.setColumns(20);
        txt_GameInfo.setRows(5);
        jScrollPane1.setViewportView(txt_GameInfo);

        btn_generateNewBoard.setText("New Game");
        btn_generateNewBoard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_generateNewBoardActionPerformed(evt);
            }
        });

        btn_exportInput.setText("Export Test");
        btn_exportInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_exportInputActionPerformed(evt);
            }
        });

        btn_loadSolution.setText("Load Solution");
        btn_loadSolution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_loadSolutionActionPerformed(evt);
            }
        });

        btn_solve.setText("Solve");
        btn_solve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_solveActionPerformed(evt);
            }
        });

        txt_solution.setColumns(20);
        txt_solution.setRows(5);
        jScrollPane2.setViewportView(txt_solution);

        jLabel1.setText("Test");

        jLabel2.setText("Solution");

        btn_loadTest.setText("Load Test");
        btn_loadTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_loadTestActionPerformed(evt);
            }
        });

        txt_result.setText("Result:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(btn_generateNewBoard)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_exportInput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_loadTest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_loadSolution)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_solve)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 303, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_result)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_generateNewBoard)
                            .addComponent(btn_exportInput)
                            .addComponent(btn_loadSolution)
                            .addComponent(btn_solve)
                            .addComponent(btn_loadTest)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txt_result)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_generateNewBoardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_generateNewBoardActionPerformed
        // TODO add your handling code here:
        mainboard = new MainBoard();
        mainboard.generateMainBoard();

        this.txt_GameInfo.setText(mainboard.width +" " +mainboard.height +"\n" + mainboard.numofBlock + "" + "");
        for (int i = 1; i <= mainboard.numofBlock; i++) {
            this.txt_GameInfo.setText(this.txt_GameInfo.getText() + "\n" + mainboard.listOfBlock[i].width + "  " + mainboard.listOfBlock[i].height);
        }

        isLoadSolution = false;
        txt_solution.setText("");
        this.repaint();
    }//GEN-LAST:event_btn_generateNewBoardActionPerformed

    private void btn_exportInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_exportInputActionPerformed
        try {
            // TODO add your handling code here:
            PrintWriter out = new PrintWriter("test.txt");

            out.println(mainboard.height + " " + mainboard.width);
            out.println(mainboard.numofBlock);
            for (int i = 1; i <= mainboard.numofBlock; i++) {
                out.println(mainboard.listOfBlock[i].width + "  " + mainboard.listOfBlock[i].height);
            }
            out.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_exportInputActionPerformed

    private void btn_loadSolutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_loadSolutionActionPerformed
        // TODO add your handling code here:
        this.repaint();
        JFileChooser jFileChooser = new JFileChooser();
        int result = jFileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                //    JOptionPane.showMessageDialog(this,"hii user clicked open sysytem");
                File file = jFileChooser.getSelectedFile();
                Scanner scanner = new Scanner(file);

                int numOfUsedBlock = scanner.nextInt();
                numOfRecordInSolution = numOfUsedBlock;

                this.txt_solution.setText("" + numOfUsedBlock);

                 Solution solution = new Solution(this.mainboard);
                 
                solution.boardCheck = new boolean[mainboard.width+1][mainboard.height+1];

                for (int i = 1; i <= solution.numOfBlock; i++) {
                    solution.listPosition[i][0] = scanner.nextInt();
                    solution.listPosition[i][1] = scanner.nextInt();
                   
                    this.txt_solution.setText(this.txt_solution.getText() + "\n" + solution.listPosition[i][0] + " " + solution.listPosition[i][1]);

                   

                }

                isLoadSolution = true;
                drawSolution(this.getGraphics(), solution.listPosition, solution.numOfBlock);
            } catch (FileNotFoundException ex) {

            } catch (IOException ex) {

            }
        }
    }//GEN-LAST:event_btn_loadSolutionActionPerformed

    private void btn_solveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_solveActionPerformed
        // TODO add your handling code here:
        Solution solution = new Solution(mainboard);
        int countBlock = solution.getSolution();
        txt_solution.setText(countBlock + "");
        isLoadSolution = true;
        
        for (int i=1; i <= solution.numOfBlock; i ++)
         txt_solution.setText( txt_solution.getText() + "\n" + solution.listPosition[i][0] + " " + solution.listPosition[i][1] );
        
        // draw Solution
       // drawSolution(this.getGraphics(),solution.boardCheck);
        
        drawSolution(this.getGraphics(), solution.listPosition, solution.numOfBlock);
        
    }//GEN-LAST:event_btn_solveActionPerformed

    private void btn_loadTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_loadTestActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
        JFileChooser jFileChooser = new JFileChooser();
        int result = jFileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                //    JOptionPane.showMessageDialog(this,"hii user clicked open sysytem");
                File file = jFileChooser.getSelectedFile();
                Scanner scanner = new Scanner(file);
                this.mainboard = new MainBoard();
                this.mainboard.width = scanner.nextInt();
                this.mainboard.height = scanner.nextInt();
                this.mainboard.numofBlock = scanner.nextInt();

                this.txt_GameInfo.setText("" + mainboard.width + " " + mainboard.height + "\n" + mainboard.numofBlock);

               mainboard.listOfBlock = new Blocks[mainboard.numofBlock+1];
                 

                for (int i = 1; i <= mainboard.numofBlock; i++) {
                    mainboard.listOfBlock[i] = new Blocks();
                    mainboard.listOfBlock[i].width = scanner.nextInt();
                    mainboard.listOfBlock[i].height = scanner.nextInt();
                     
                    this.txt_GameInfo.setText(this.txt_GameInfo.getText() + "\n" + mainboard.listOfBlock[i].width + " " + mainboard.listOfBlock[i].height );

                }
     } catch (FileNotFoundException ex) {

            } catch (IOException ex) {

            }
        }
    }//GEN-LAST:event_btn_loadTestActionPerformed

    /**
     * @param args the command line arguments
     */
    boolean isLoadSolution = false;
    int numOfRecordInSolution;

    public void paint(Graphics g) {
        nextColor = 0;
        g.setColor(Color.white);
        g.drawRect(MARGIN_X, MARGIN_Y, mainboard.width * UNIT, mainboard.height * UNIT);

        g.setColor(Color.gray);
        for (int i = 1; i <= mainboard.width; i++) {
            for (int j = 1; j <= mainboard.height; j++) {
                drawBlock(g, i, j, false);
            }
        }

        
    }

    void drawSolution (Graphics g, int listPosition[][], int numOfBlock) {
     if (isLoadSolution) 
            for (int i =1; i <=numOfBlock; i++) 
            if ( listPosition[i][0] !=-1 &&  listPosition[i][1] !=-1 ) {
                drawBlock(g, listPosition[i][0], listPosition[i][1], mainboard.listOfBlock[i].width, mainboard.listOfBlock[i].height  );
                g.setColor(Color.red);
                g.setFont(new Font("TimesRoman", Font.BOLD, 15));
                g.drawString(i+"", MARGIN_X+3+ (listPosition[i][0]-1)*UNIT,MARGIN_Y+3+ (listPosition[i][1]-1)*UNIT+15);
            }
         
    }    
    void drawSolution (Graphics g, boolean boardCheck[][]) {
     if (isLoadSolution) 
             for (int i = 1; i <= mainboard.width; i++) {
                for (int j = 1; j<= mainboard.height; j++) {
                    drawBlock(g, i, j, boardCheck[i][j]);
                }
            }
         
    }  
    Color listColor[] = {Color.BLUE, Color.CYAN, Color.DARK_GRAY, Color.GRAY, Color.GREEN, Color.MAGENTA, Color.ORANGE, Color.YELLOW};
    int nextColor = 0;
    public void drawBlock(Graphics g, int x, int y, int w, int h) {

        g.setColor(listColor[(nextColor++)%listColor.length]);
        g.fillRect(MARGIN_X + (x-1) * UNIT, MARGIN_Y + (y-1) * UNIT, w * UNIT, h * UNIT);
        g.setColor(Color.black);
        g.drawRect(MARGIN_X + (x-1) * UNIT, MARGIN_Y + (y-1) * UNIT, w * UNIT, h * UNIT);

    }

    public void drawBlock(Graphics g, int x, int y, boolean isGrass) {

        if (!isGrass) {
            g.drawImage(Asset.nullBlock.image, MARGIN_X + (x-1) * UNIT, MARGIN_Y + (y-1) * UNIT, this);
        } else {
            g.drawImage(Asset.grassBlock.image, MARGIN_X + (x-1) * UNIT, MARGIN_Y + (y-1) * UNIT, this);
        }

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_exportInput;
    private javax.swing.JButton btn_generateNewBoard;
    private javax.swing.JButton btn_loadSolution;
    private javax.swing.JButton btn_loadTest;
    private javax.swing.JButton btn_solve;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txt_GameInfo;
    private javax.swing.JLabel txt_result;
    private javax.swing.JTextArea txt_solution;
    // End of variables declaration//GEN-END:variables
}
